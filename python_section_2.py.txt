
Question 9: Distance Matrix Calculation
def calculate_distance_matrix(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate the cumulative distance matrix from a DataFrame containing
    distances between toll locations.
    
    Args:
    df (pd.DataFrame): The dataset with columns 'id_start', 'id_end', and 'distance'.
    
    Returns:
    pd.DataFrame: Symmetric DataFrame representing the distance matrix between toll locations.
    """
    # Get all unique IDs from both 'id_start' and 'id_end'
    unique_ids = pd.unique(df[['id_start', 'id_end']].values.ravel())
    
    # Initialize an empty distance matrix with IDs as both rows and columns
    distance_matrix = pd.DataFrame(
        data=0.0, index=unique_ids, columns=unique_ids
    )
    
    # Populate the matrix with the given distances
    for _, row in df.iterrows():
        start, end, distance = row['id_start'], row['id_end'], row['distance']
        # Set distances symmetrically (A -> B and B -> A)
        distance_matrix.loc[start, end] = distance
        distance_matrix.loc[end, start] = distance
    
    return distance_matrix

# Calculate the distance matrix
distance_matrix = calculate_distance_matrix(df)
distance_matrix.head()

Question 10: Unroll Distance Matrix

def unroll_distance_matrix(distance_matrix: pd.DataFrame) -> pd.DataFrame:
    """
    Unrolls a symmetric distance matrix into a DataFrame with three columns:
    id_start, id_end, and distance.
    
    Args:
    distance_matrix (pd.DataFrame): The symmetric distance matrix DataFrame.
    
    Returns:
    pd.DataFrame: A DataFrame containing the unrolled distances between toll locations.
    """
    unrolled_data = []

    # Iterate over the rows and columns of the matrix
    for id_start in distance_matrix.index:
        for id_end in distance_matrix.columns:
            if id_start != id_end:  # Exclude same start-end pairs
                distance = distance_matrix.loc[id_start, id_end]
                unrolled_data.append([id_start, id_end, distance])

    # Convert the list to a DataFrame
    unrolled_df = pd.DataFrame(unrolled_data, columns=['id_start', 'id_end', 'distance'])
    return unrolled_df

# Unroll the distance matrix
unrolled_df = unroll_distance_matrix(distance_matrix)
unrolled_df.head()  # Display the first few rows of the unrolled DataFrame



Q11.
def find_ids_within_ten_percentage_threshold(unrolled_df: pd.DataFrame, reference_id: int) -> list:
    """
    Finds all id_start values whose average distances lie within 10% of the 
    average distance of the reference ID.
    
    Args:
    unrolled_df (pd.DataFrame): DataFrame with columns 'id_start', 'id_end', and 'distance'.
    reference_id (int): The reference ID from the 'id_start' column.
    
    Returns:
    list: Sorted list of id_start values within 10% of the reference ID's average distance.
    """
    # Calculate the average distance for the reference ID
    ref_avg_distance = unrolled_df[unrolled_df['id_start'] == reference_id]['distance'].mean()

    # Calculate the 10% threshold
    lower_bound = ref_avg_distance * 0.9
    upper_bound = ref_avg_distance * 1.1

    # Find all IDs whose average distances are within the threshold
    avg_distances = unrolled_df.groupby('id_start')['distance'].mean()
    ids_within_threshold = avg_distances[(avg_distances >= lower_bound) & (avg_distances <= upper_bound)].index.tolist()

    # Sort the resulting IDs
    ids_within_threshold.sort()
    
    return ids_within_threshold

# Example usage
reference_id = 1001400  # Replace with the desired reference ID
ids_within_threshold = find_ids_within_ten_percentage_threshold(unrolled_df, reference_id)
ids_within_threshold

Q12:import pandas as pd

def calculate_toll_rate(df):
    # Check if the DataFrame has the 'distance' column
    if 'distance' not in df.columns:
        raise ValueError("Input DataFrame must contain a 'distance' column.")
    
    # Define the rate coefficients for each vehicle type
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }
    
    # Calculate toll rates for each vehicle type
    for vehicle_type, coefficient in rate_coefficients.items():
        df[vehicle_type] = df['distance'] * coefficient
    
    return df

# Example usage:
# Assuming you have a DataFrame named 'df' with a 'distance' column
data = {
    'distance': [10, 20, 30, 40]  # Example distances in kilometers
}
df = pd.DataFrame(data)

# Calculate toll rates
result_df = calculate_toll_rate(df)

print(result_df)


Q13.
import pandas as pd
import numpy as np
from datetime import time, timedelta

def calculate_time_based_toll_rates(df):
    # Check if necessary columns exist
    if not all(col in df.columns for col in ['moto', 'car', 'rv', 'bus', 'truck']):
        raise ValueError("Input DataFrame must contain vehicle rate columns (moto, car, rv, bus, truck).")

    # Define discount factors based on time ranges
    weekday_discount = {
        (time(0, 0), time(10, 0)): 0.8,
        (time(10, 0), time(18, 0)): 1.2,
        (time(18, 0), time(23, 59, 59)): 0.8
    }
    weekend_discount = 0.7

    # Days of the week
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    # Prepare new columns
    results = []

    # Calculate toll rates for each day and time range
    for day in days:
        for hour in range(24):  # Loop through 24 hours
            start_time = time(hour, 0)
            end_time = time(hour, 59, 59)  # Ending at 59 seconds of the minute

            # Initialize the row for the day
            row = {
                'start_day': day,
                'start_time': start_time,
                'end_day': day,
                'end_time': end_time
            }
            
            # Apply discount based on the day and time
            if day in ['Saturday', 'Sunday']:
                # Apply weekend discount
                for vehicle in ['moto', 'car', 'rv', 'bus', 'truck']:
                    row[vehicle] = df[vehicle] * weekend_discount
            else:
                # Apply weekday discounts
                for (start_range, end_range), discount in weekday_discount.items():
                    if start_time >= start_range and end_time <= end_range:
                        for vehicle in ['moto', 'car', 'rv', 'bus', 'truck']:
                            row[vehicle] = df[vehicle] * discount

            # Append to results
            results.append(row)

    # Create a new DataFrame with the results
    results_df = pd.DataFrame(results)

    return results_df

# Example usage:
# Create a sample DataFrame with vehicle rates
data = {
    'moto': [8.0, 16.0, 24.0, 32.0],
    'car': [12.0, 24.0, 36.0, 48.0],
    'rv': [15.0, 30.0, 45.0, 60.0],
    'bus': [22.0, 44.0, 66.0, 88.0],
    'truck': [36.0, 72.0, 108.0, 144.0],
}
df = pd.DataFrame(data)

# Calculate time-based toll rates
result_df = calculate_time_based_toll_rates(df)

# Display result
print(result_df)

